version: 2.1

orbs:
  kube: circleci/kubernetes@1.3.1

parameters:
  env:
    type: string
    default: dev

jobs:
  deploy:
    docker:
      - image: cimg/base:stable
    description: Deploys an application given its Github repository and the parameters needed for its Kubernetes deployment
    parameters:
      env:
        type: string
        default: dev
      repository:
        type: string
        default: API_REPOSITORY
      app:
        type: string
        default: api
      ingress_path:
        type: string
        default: "/*"
      ingress_target:
        type: string
        default: "1"
      with_configmap:
        type: boolean
        default: false
    steps:
      - checkout
      - run:
          name: Configuration storage
          command: cat ./environments/<< parameters.env >>/.env >> $BASH_ENV
      - kube/install-kubectl
      - kube/install-kubeconfig
      - run:
          name: Authenticate on Docker HUB from environment variable
          command: echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
      - fetch_version:
          repository: << parameters.repository >>
      - deploy_stack:
          env: << parameters.env >>
          app: << parameters.app >>
          ingress_path: << parameters.ingress_path >>
          ingress_target: << parameters.ingress_target >>
          with_configmap: << parameters.with_configmap >>

commands:
  fetch_version:
    parameters:
      repository:
        type: string
        default: API_REPOSITORY
      env:
        type: string
        default: dev
    steps:
      - run:
          name: Tags storage
          command: curl https://hub.docker.com/v2/repositories/${DOCKER_USERNAME}/${<< parameters.repository >>}/tags -o tags.json
      - run:
          name: Last version traces
          command: export LAST_VERSION=$(cat tags.json | jq .results | jq .[0] | jq .name) && echo "export VERSION=${LAST_VERSION}" >> $BASH_ENV
  deploy_stack:
    parameters:
      app:
        type: string
        default: api
      ingress_path:
        type: string
        default: "/*"
      ingress_target:
        type: string
        default: "1"
      with_configmap:
        type: boolean
        default: false
      env:
        type: string
        default: dev
    steps:
      - run:
          name: Deployment traces
          command: echo "deploying version ${VERSION} in namespace ${KUBE_NS} and ingress path ${<< parameters.ingress_path >>}"
      - run:
          name: Configmap update
          command: |
            sed -e "s#<DATA>#${KUBECONFIG_DATA}#g" \
                -e "s#<NAMESPACE>#${KUBE_NS}#g" \
                apps/common/configmap.yml | kubectl apply -f -
      - run:
          name: Kubernetes deployment update
          command: |
            sed -e "s#<VERSION>#${VERSION}#g" \
                -e "s#<NAMESPACE>#${KUBE_NS}#g" \
                -e "s#<PUBLIC_PATH>#${GUI_PUBLIC_PATH}#g" \
                apps/<< parameters.app >>/deployment.yml | kubectl apply -f -
      - run:
          name: Kubernetes service update
          command: sed -e "s#<NAMESPACE>#${KUBE_NS}#g" apps/<< parameters.app >>/service.yml | kubectl apply -f -
      - run:
          name: Kubernetes ingress update
          command: |
            if [ '<< parameters.env >>' = 'prod' ]
            then
              ANNOTATIONS="  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /$<< parameters.ingress_target >>"
            else
              ANNOTATIONS=""
            fi
            sed -e "s#<NAMESPACE>#${KUBE_NS}#g" \
                -e "s#<ANNOTATIONS>#${ANNOTATIONS}#g" \
                -e "s#<PATH>#${<< parameters.ingress_path >>}#g" \
                -e "s#<TARGET>#${<< parameters.ingress_target >>}#g" \
                apps/<< parameters.app >>/ingress.yml | kubectl apply -f -

workflows:
  deploy-stack:
    jobs:
      - deploy:
          env: << pipeline.parameters.env >>
          repository: GUI_REPOSITORY
          ingress_path: GUI_INGRESS_PATH
          ingress_target: GUI_REWRITE_TARGET
          with_configmap: true
          app: frontend
      - deploy:
          env: << pipeline.parameters.env >>
          repository: API_REPOSITORY
          ingress_path: API_INGRESS_PATH
          ingress_target: API_REWRITE_TARGET
          app: api